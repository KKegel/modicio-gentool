# This file is part of the codi-insights software.
# Copyright (C) 2022 Karl Kegel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Routes

# serve all files from the public folder
GET         /assets/*file                                           controllers.Assets.versioned(path="/public", file: Asset)


# Redirect to model/
GET         /                                                       controllers.ApplicationController.index()

# Show all available Fragments grouped by template/instaciable
GET         /model                                                  controllers.ModelController.index()
# Shows the model in its native-lang representation (non-edit only)
#GET     /model/native

# Show the details and rules of a specific Fragment
GET         /model/fragment/:name                                   controllers.ModelController.fragment(name: String, identity: String)
# Add a new Fragment with some predefined values but EMPTY RULESETS
POST        /model/fragment                                         controllers.ModelController.addModelElement()

POST        /model/variant                                          controllers.ModelController.incrementVariant()

POST        /model/fragment/:name/singleton/add                     controllers.ModelController.updateSingleton(name: String, identity: String)

# Add a new rule to the HEAD fragment
POST        /model/fragment/:name/rules/childOf_new                 controllers.ModelController.addExtensionRule(name: String, identity: String)
POST        /model/fragment/:name/rules/link_new                    controllers.ModelController.addLinkRule(name: String, identity: String)
POST        /model/fragment/:name/rules/attribute_new               controllers.ModelController.addAttributeRule(name: String, identity: String)
POST        /model/fragment/:name/rules/value_new                   controllers.ModelController.addConcreteValueRule(name: String, identity: String)

POST        /model/fragment/:name/rules/:ruleId/slot_new            controllers.ModelController.addSlot(name: String, identity: String, ruleId: String)
POST        /model/fragment/:name/rules/:ruleId/slot_delete         controllers.ModelController.removeSlot(name: String, identity: String, ruleId: String, variantTime: Long)

# Delete a rule from the HEAD fragment
POST        /model/fragment/:name/rules/:ruleId/delete              controllers.ModelController.removeRule(name: String, identity: String, ruleId: String)

GET         /instances                                              controllers.InstanceController.index(selection: String)

POST        /instances/:selection                                   controllers.InstanceController.addInstance(selection: String)

GET         /instances/:selection/:instanceId                       controllers.InstanceController.getInstance(selection: String, instanceId: String)

GET         /instances/:selection/:instanceId/native                controllers.InstanceController.getInstanceNative(selection: String, instanceId: String)

POST        /instances/:selection/:instanceId/:attributeName        controllers.InstanceController.updateAttribute(selection: String, instanceId: String, attributeName: String)

POST        /instances/:selection/:instanceId                       controllers.InstanceController.addAssociation(selection: String, instanceId: String, relation: String)
